/**
 * Optional ...options.
 *
 * Today it offers:
 *
 *  - `settings` a peril-like-GH-path to the JSON file of ignored words. e.g.
 *    "orta/words@ignore_words.json" which is the repo orta/words and the file
 *    "ignore_words.json". See the README for usage.
 *
 *  - `ignore` a list of words to ignore
 *  - `whitelistFiles` a list of files to ignore
 *  - `codeSpellCheck` a list of regexes to run cspell against
 */
export interface SpellCheckOptions {
    settings?: string;
    ignore?: string[];
    whitelistFiles?: string[];
    codeSpellCheck?: string[];
}
/**
 * A de-null'd version of the spell settings
 */
export interface SpellCheckSettings {
    ignore: string[];
    "cSpell.words"?: string[];
    whitelistFiles: string[];
    hasLocalSettings?: boolean;
}
/**
 * This is the _expected_ structure of the JSON file for settings.
 */
export declare type SpellCheckJSONSettings = Partial<SpellCheckSettings>;
export interface SpellCheckWord {
    word: string;
    index: number;
}
export declare enum SpellChecker {
    MDSpellCheck = 0,
    CSpell = 1
}
export declare const spellCheck: (file: string, sourceText: string, type: SpellChecker, ignoredWords: string[], ignoredRegexs: string[]) => Promise<void>;
export declare const mdSpellCheck: (sourceText: string) => SpellCheckWord[];
export declare const codeSpellCheck: (sourceText: string, path: string) => Promise<SpellCheckWord[]>;
export declare const githubRepresentationForPath: (value: string) => {
    path: string;
    owner: string;
    repo: string;
} | undefined;
export declare const parseSettingsFromFile: (path: string, repo: string) => Promise<SpellCheckSettings>;
export declare const getSpellcheckSettings: (options?: SpellCheckOptions | undefined) => Promise<SpellCheckSettings>;
/**
 * Spell checks any created or modified markdown files.
 *
 * Has an optional setting object for things like ignore.
 */
export default function spellcheck(options?: SpellCheckOptions): Promise<void>;
